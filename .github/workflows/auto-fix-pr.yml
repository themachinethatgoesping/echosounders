# SPDX-FileCopyrightText: 2025 Peter Urban, Ghent University
#
# SPDX-License-Identifier: CC0-1.0

name: Auto-Fix PR on Test Failure

on:
  workflow_run:
    workflows: ["GitHub Copilot Agent CI"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  auto-fix:
    name: Auto-fix failed tests
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.event == 'pull_request' &&
      (contains(github.event.workflow_run.head_branch, 'copilot/') ||
       github.event.workflow_run.actor.login == 'github-actions[bot]')
    
    steps:
    - name: Get PR number
      id: pr
      uses: actions/github-script@v7
      with:
        script: |
          const pulls = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
            state: 'open'
          });
          
          if (pulls.data.length > 0) {
            core.setOutput('number', pulls.data[0].number);
            return pulls.data[0].number;
          } else {
            core.setFailed('No open PR found for this branch');
          }

    - name: Comment on PR with failure info
      if: steps.pr.outputs.number
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ steps.pr.outputs.number }};
          
          const comment = `## ðŸš¨ Test Failure Detected
          
          The automated tests have failed for this PR. Here's what you can do:
          
          ### For GitHub Copilot Users:
          1. Ask Copilot to analyze the test failures by running: \`@github copilot fix tests\`
          2. Copilot will examine the logs and suggest fixes
          3. Review and apply the suggested changes
          4. Push the changes to trigger the tests again
          
          ### Manual Investigation:
          1. Check the [workflow logs](${context.payload.workflow_run.html_url}) for detailed error messages
          2. Look for compilation errors, test failures, or missing dependencies
          3. Fix the issues and push your changes
          
          The CI will automatically re-run when you push new commits to this branch.
          
          ---
          *This comment was automatically generated by the Auto-Fix PR workflow.*`;
          
          await github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Add help-wanted label
      if: steps.pr.outputs.number
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ steps.pr.outputs.number }};
          
          await github.rest.issues.addLabels({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['test-failure', 'needs-fix']
          });

  # Job to remove labels when tests pass
  cleanup-success:
    name: Cleanup on success
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request'
    
    steps:
    - name: Get PR number
      id: pr
      uses: actions/github-script@v7
      with:
        script: |
          const pulls = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
            state: 'open'
          });
          
          if (pulls.data.length > 0) {
            core.setOutput('number', pulls.data[0].number);
            return pulls.data[0].number;
          }

    - name: Remove failure labels
      if: steps.pr.outputs.number
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ steps.pr.outputs.number }};
          
          try {
            await github.rest.issues.removeLabel({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'test-failure'
            });
          } catch (e) {
            // Label might not exist, ignore error
          }
          
          try {
            await github.rest.issues.removeLabel({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'needs-fix'
            });
          } catch (e) {
            // Label might not exist, ignore error
          }